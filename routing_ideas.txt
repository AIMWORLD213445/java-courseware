


//Previous routing...
get("/", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  model.put("template", "templates/index.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

post("/", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  model.put("result", request.queryParams("item1"));
  model.put("template", "templates/index.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

get("/students", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  model.put("courses", Course.all());
  model.put("template", "templates/student.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

post("/students", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  Student student = new Student(request.queryParams("name"));
  model.put("students", Student.all());
  model.put("student", student);
  model.put("template", "templates/student.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

get("/teachers", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  model.put("teachers", Teacher.all());
  model.put("template", "templates/teacher.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

get("/teachers/:id", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  Teacher teacher = Teacher.find(Integer.parseInt(request.params(":id")));
  model.put("teacher", teacher);
  model.put("courses", teacher.getAllCourses());
  model.put("subjects", Course.Subjects.values());
  model.put("template", "templates/course.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

post("/teachers", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  Teacher teacher = new Teacher(request.queryParams("name"));
  model.put("teachers", Teacher.all());
  model.put("teacher", teacher);
  model.put("template", "templates/teacher.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

get("/courses", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  model.put("courses", Course.all());
  model.put("subjects", Course.Subjects.values());
  model.put("template", "templates/course.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());

post("/courses", (request, response) -> {
  Map<String, Object> model = new HashMap<String, Object>();
  Course course = new Course(request.queryParams("name"),request.queryParams("description"),request.queryParams("subject"),Integer.parseInt(request.queryParams("teacherid")));
  course.save();
  model.put("courses", Course.all());
  model.put("course", course);
  model.put("template", "templates/course.vtl");
  return new ModelAndView(model, layout);
}, new VelocityTemplateEngine());
